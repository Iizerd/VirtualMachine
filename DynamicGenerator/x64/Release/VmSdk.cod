; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29111.0 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?VMSDKInit@@YAHPEAU_VM_DATA@@PEAX@Z		; VMSDKInit
PUBLIC	?VMSDKGetSymbol@@YAPEAXPEAU_VM_DATA@@PEBD@Z	; VMSDKGetSymbol
PUBLIC	?VMSDKBuildHandlerTable@@YAPEAU_VM_HANDLER_TABLE@@PEAU_VM_DATA@@@Z ; VMSDKBuildHandlerTable
PUBLIC	?VMSDKBuildHandlerTableInPlace@@YAXPEAU_VM_DATA@@PEAU_VM_HANDLER_TABLE@@@Z ; VMSDKBuildHandlerTableInPlace
PUBLIC	?VMSDKEnterAtSymbol@@YAXPEAU_VM_DATA@@PEAT_VM_CONTEXT@@PEAXPEAU_VM_HANDLER_TABLE@@PEAU_VM_AUX_STORAGE@@@Z ; VMSDKEnterAtSymbol
EXTRN	__imp_malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$?VMSDKGetSymbol@@YAPEAXPEAU_VM_DATA@@PEBD@Z DD imagerel $LN15
	DD	imagerel $LN15+142
	DD	imagerel $unwind$?VMSDKGetSymbol@@YAPEAXPEAU_VM_DATA@@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?VMSDKBuildHandlerTable@@YAPEAU_VM_HANDLER_TABLE@@PEAU_VM_DATA@@@Z DD imagerel $LN15
	DD	imagerel $LN15+95
	DD	imagerel $unwind$?VMSDKBuildHandlerTable@@YAPEAU_VM_HANDLER_TABLE@@PEAU_VM_DATA@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?VMSDKEnterAtSymbol@@YAXPEAU_VM_DATA@@PEAT_VM_CONTEXT@@PEAXPEAU_VM_HANDLER_TABLE@@PEAU_VM_AUX_STORAGE@@@Z DD imagerel $LN4
	DD	imagerel $LN4+54
	DD	imagerel $unwind$?VMSDKEnterAtSymbol@@YAXPEAU_VM_DATA@@PEAT_VM_CONTEXT@@PEAXPEAU_VM_HANDLER_TABLE@@PEAU_VM_AUX_STORAGE@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?VMSDKEnterAtSymbol@@YAXPEAU_VM_DATA@@PEAT_VM_CONTEXT@@PEAXPEAU_VM_HANDLER_TABLE@@PEAU_VM_AUX_STORAGE@@@Z DD 030601H
	DD	023406H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?VMSDKBuildHandlerTable@@YAPEAU_VM_HANDLER_TABLE@@PEAU_VM_DATA@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?VMSDKGetSymbol@@YAPEAXPEAU_VM_DATA@@PEBD@Z DD 060f01H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
; Function compile flags: /Ogtpy
; File C:\$Fanta\VirtualMachine\DynamicGenerator\VmSdk.cpp
;	COMDAT ?VMSDKEnterAtSymbol@@YAXPEAU_VM_DATA@@PEAT_VM_CONTEXT@@PEAXPEAU_VM_HANDLER_TABLE@@PEAU_VM_AUX_STORAGE@@@Z
_TEXT	SEGMENT
VmData$ = 16
Context$ = 24
Symbol$ = 32
HandlerTable$ = 40
Storage$ = 48
?VMSDKEnterAtSymbol@@YAXPEAU_VM_DATA@@PEAT_VM_CONTEXT@@PEAXPEAU_VM_HANDLER_TABLE@@PEAU_VM_AUX_STORAGE@@@Z PROC ; VMSDKEnterAtSymbol, COMDAT

; 84   : {

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi

; 85   : 	typedef VOID(*FnVmEnter)(PVM_CONTEXT Context, PVOID Symbol, PVM_HANDLER_TABLE HandlerTable, PVM_AUX_STORAGE Storage);
; 86   : 	((FnVmEnter)(HandlerTable->HandlerTable[VmData->VmHeader->VmEnterOpCode]))(Context, Symbol, HandlerTable, Storage);

  00006	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  0000a	49 8b f9	 mov	 rdi, r9
  0000d	4c 8b 4c 24 30	 mov	 r9, QWORD PTR Storage$[rsp]
  00012	4d 8b d8	 mov	 r11, r8
  00015	48 8b da	 mov	 rbx, rdx
  00018	4c 8b c7	 mov	 r8, rdi
  0001b	49 8b d3	 mov	 rdx, r11
  0001e	48 8b cb	 mov	 rcx, rbx
  00021	44 0f b6 90 0c
	04 00 00	 movzx	 r10d, BYTE PTR [rax+1036]
  00029	4a 8b 04 d7	 mov	 rax, QWORD PTR [rdi+r10*8]

; 87   : }

  0002d	48 8b 5c 24 10	 mov	 rbx, QWORD PTR [rsp+16]
  00032	5f		 pop	 rdi

; 85   : 	typedef VOID(*FnVmEnter)(PVM_CONTEXT Context, PVOID Symbol, PVM_HANDLER_TABLE HandlerTable, PVM_AUX_STORAGE Storage);
; 86   : 	((FnVmEnter)(HandlerTable->HandlerTable[VmData->VmHeader->VmEnterOpCode]))(Context, Symbol, HandlerTable, Storage);

  00033	48 ff e0	 rex_jmp rax
?VMSDKEnterAtSymbol@@YAXPEAU_VM_DATA@@PEAT_VM_CONTEXT@@PEAXPEAU_VM_HANDLER_TABLE@@PEAU_VM_AUX_STORAGE@@@Z ENDP ; VMSDKEnterAtSymbol
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\$Fanta\VirtualMachine\DynamicGenerator\VmSdk.cpp
;	COMDAT ?VMSDKBuildHandlerTableInPlace@@YAXPEAU_VM_DATA@@PEAU_VM_HANDLER_TABLE@@@Z
_TEXT	SEGMENT
VmData$ = 8
Table$ = 16
?VMSDKBuildHandlerTableInPlace@@YAXPEAU_VM_DATA@@PEAU_VM_HANDLER_TABLE@@@Z PROC ; VMSDKBuildHandlerTableInPlace, COMDAT

; 77   : {

  00000	41 b8 10 00 00
	00		 mov	 r8d, 16
  00006	4c 8d 4a 10	 lea	 r9, QWORD PTR [rdx+16]
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL4@VMSDKBuild:

; 78   : 	for (INT i = 0; i < 256; i++)
; 79   : 	{
; 80   : 		Table->HandlerTable[i] = (PVOID)((ULONG64)VmData->HandlerCodeBase + (ULONG64)VmData->VmHeader->HandlerTable[i]);

  00010	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  00014	4d 8d 49 20	 lea	 r9, QWORD PTR [r9+32]
  00018	42 8b 54 00 fc	 mov	 edx, DWORD PTR [rax+r8-4]
  0001d	48 03 11	 add	 rdx, QWORD PTR [rcx]
  00020	49 89 51 d0	 mov	 QWORD PTR [r9-48], rdx
  00024	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  00028	42 8b 14 00	 mov	 edx, DWORD PTR [rax+r8]
  0002c	48 03 11	 add	 rdx, QWORD PTR [rcx]
  0002f	49 89 51 d8	 mov	 QWORD PTR [r9-40], rdx
  00033	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  00037	42 8b 54 00 04	 mov	 edx, DWORD PTR [rax+r8+4]
  0003c	48 03 11	 add	 rdx, QWORD PTR [rcx]
  0003f	49 89 51 e0	 mov	 QWORD PTR [r9-32], rdx
  00043	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  00047	42 8b 54 00 08	 mov	 edx, DWORD PTR [rax+r8+8]
  0004c	49 83 c0 10	 add	 r8, 16
  00050	48 03 11	 add	 rdx, QWORD PTR [rcx]
  00053	49 89 51 e8	 mov	 QWORD PTR [r9-24], rdx
  00057	49 81 f8 10 04
	00 00		 cmp	 r8, 1040		; 00000410H
  0005e	7c b0		 jl	 SHORT $LL4@VMSDKBuild

; 81   : 	}
; 82   : }

  00060	c3		 ret	 0
?VMSDKBuildHandlerTableInPlace@@YAXPEAU_VM_DATA@@PEAU_VM_HANDLER_TABLE@@@Z ENDP ; VMSDKBuildHandlerTableInPlace
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\$Fanta\VirtualMachine\DynamicGenerator\VmSdk.cpp
;	COMDAT ?VMSDKBuildHandlerTable@@YAPEAU_VM_HANDLER_TABLE@@PEAU_VM_DATA@@@Z
_TEXT	SEGMENT
VmData$ = 48
?VMSDKBuildHandlerTable@@YAPEAU_VM_HANDLER_TABLE@@PEAU_VM_DATA@@@Z PROC ; VMSDKBuildHandlerTable, COMDAT

; 69   : {

$LN15:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 70   : 	PVM_HANDLER_TABLE Table = (PVM_HANDLER_TABLE)malloc(sizeof(VM_HANDLER_TABLE));

  00009	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00014	4c 8b c0	 mov	 r8, rax

; 71   : 	if (!Table)

  00017	48 85 c0	 test	 rax, rax
  0001a	75 06		 jne	 SHORT $LN2@VMSDKBuild

; 75   : }

  0001c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00020	5b		 pop	 rbx
  00021	c3		 ret	 0
$LN2@VMSDKBuild:

; 80   : 		Table->HandlerTable[i] = (PVOID)((ULONG64)VmData->HandlerCodeBase + (ULONG64)VmData->VmHeader->HandlerTable[i]);

  00022	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  00026	33 d2		 xor	 edx, edx
  00028	4c 8b 0b	 mov	 r9, QWORD PTR [rbx]
  0002b	48 83 c1 10	 add	 rcx, 16
  0002f	90		 npad	 1
$LL7@VMSDKBuild:
  00030	8b 41 fc	 mov	 eax, DWORD PTR [rcx-4]
  00033	48 8d 49 08	 lea	 rcx, QWORD PTR [rcx+8]
  00037	49 03 c1	 add	 rax, r9
  0003a	49 89 04 d0	 mov	 QWORD PTR [r8+rdx*8], rax
  0003e	8b 41 f8	 mov	 eax, DWORD PTR [rcx-8]
  00041	49 03 c1	 add	 rax, r9
  00044	49 89 44 d0 08	 mov	 QWORD PTR [r8+rdx*8+8], rax
  00049	48 83 c2 02	 add	 rdx, 2
  0004d	48 81 fa 00 01
	00 00		 cmp	 rdx, 256		; 00000100H
  00054	7c da		 jl	 SHORT $LL7@VMSDKBuild

; 72   : 		return NULL;
; 73   : 	VMSDKBuildHandlerTableInPlace(VmData, Table);
; 74   : 	return Table;

  00056	49 8b c0	 mov	 rax, r8

; 75   : }

  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5b		 pop	 rbx
  0005e	c3		 ret	 0
?VMSDKBuildHandlerTable@@YAPEAU_VM_HANDLER_TABLE@@PEAU_VM_DATA@@@Z ENDP ; VMSDKBuildHandlerTable
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\$Fanta\VirtualMachine\DynamicGenerator\VmSdk.cpp
;	COMDAT ?VMSDKGetSymbol@@YAPEAXPEAU_VM_DATA@@PEBD@Z
_TEXT	SEGMENT
VmData$ = 8
SymbolName$ = 16
?VMSDKGetSymbol@@YAPEAXPEAU_VM_DATA@@PEBD@Z PROC	; VMSDKGetSymbol, COMDAT

; 58   : {

$LN15:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi

; 59   : 	for (INT i = 0; i < VmData->VmHeader->SymbolTableSize; i++)

  0000f	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  00013	45 33 c9	 xor	 r9d, r9d
  00016	48 8b f2	 mov	 rsi, rdx
  00019	48 8b f9	 mov	 rdi, rcx
  0001c	44 8b 58 04	 mov	 r11d, DWORD PTR [rax+4]
  00020	45 85 db	 test	 r11d, r11d
  00023	74 3b		 je	 SHORT $LN3@VMSDKGetSy

; 60   : 	{
; 61   : 		if (0 == strcmp(SymbolName, VmData->SymbolTable[i].Name))

  00025	48 8b 59 10	 mov	 rbx, QWORD PTR [rcx+16]
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@VMSDKGetSy:
  00030	4d 63 d1	 movsxd	 r10, r9d
  00033	4b 8d 04 d2	 lea	 rax, QWORD PTR [r10+r10*8]
  00037	4c 8d 04 83	 lea	 r8, QWORD PTR [rbx+rax*4]
  0003b	48 8b c6	 mov	 rax, rsi
  0003e	4c 2b c6	 sub	 r8, rsi
$LL12@VMSDKGetSy:
  00041	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00044	42 0f b6 0c 00	 movzx	 ecx, BYTE PTR [rax+r8]
  00049	2b d1		 sub	 edx, ecx
  0004b	75 07		 jne	 SHORT $LN13@VMSDKGetSy
  0004d	48 ff c0	 inc	 rax
  00050	85 c9		 test	 ecx, ecx
  00052	75 ed		 jne	 SHORT $LL12@VMSDKGetSy
$LN13@VMSDKGetSy:
  00054	85 d2		 test	 edx, edx
  00056	74 1a		 je	 SHORT $LN8@VMSDKGetSy

; 59   : 	for (INT i = 0; i < VmData->VmHeader->SymbolTableSize; i++)

  00058	41 ff c1	 inc	 r9d
  0005b	45 3b cb	 cmp	 r9d, r11d
  0005e	72 d0		 jb	 SHORT $LL4@VMSDKGetSy
$LN3@VMSDKGetSy:

; 62   : 		{
; 63   : 			return (PVOID)((ULONG64)VmData->VmCode + (ULONG64)VmData->SymbolTable[i].Offset);
; 64   : 		}
; 65   : 	}
; 66   : 	return NULL;

  00060	33 c0		 xor	 eax, eax

; 67   : }

  00062	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00067	48 8b 74 24 10	 mov	 rsi, QWORD PTR [rsp+16]
  0006c	48 8b 7c 24 18	 mov	 rdi, QWORD PTR [rsp+24]
  00071	c3		 ret	 0
$LN8@VMSDKGetSy:
  00072	48 8b 74 24 10	 mov	 rsi, QWORD PTR [rsp+16]
  00077	4b 8d 04 d2	 lea	 rax, QWORD PTR [r10+r10*8]
  0007b	8b 44 83 20	 mov	 eax, DWORD PTR [rbx+rax*4+32]
  0007f	48 03 47 08	 add	 rax, QWORD PTR [rdi+8]
  00083	48 8b 7c 24 18	 mov	 rdi, QWORD PTR [rsp+24]
  00088	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  0008d	c3		 ret	 0
?VMSDKGetSymbol@@YAPEAXPEAU_VM_DATA@@PEBD@Z ENDP	; VMSDKGetSymbol
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\$Fanta\VirtualMachine\DynamicGenerator\VmSdk.cpp
;	COMDAT ?VMSDKInit@@YAHPEAU_VM_DATA@@PEAX@Z
_TEXT	SEGMENT
VmData$ = 8
ModuleBase$ = 16
?VMSDKInit@@YAHPEAU_VM_DATA@@PEAX@Z PROC		; VMSDKInit, COMDAT

; 4    : {

  00000	4c 8b ca	 mov	 r9, rdx

; 5    : 	if (!ModuleBase)

  00003	48 85 d2	 test	 rdx, rdx
  00006	0f 84 f7 00 00
	00		 je	 $LN16@VMSDKInit

; 6    : 		return FALSE;
; 7    : 
; 8    : 	VmData->VmHeader = NULL;

  0000c	45 33 c0	 xor	 r8d, r8d

; 9    : 	VmData->VmCode = NULL;
; 10   : 	VmData->SymbolTable = NULL;
; 11   : 	VmData->Unpacker = NULL;
; 12   : 	VmData->HandlerCodeBase = NULL;
; 13   : 
; 14   : 	PIMAGE_DOS_HEADER DosHeader = (PIMAGE_DOS_HEADER)ModuleBase;
; 15   : 	if (DosHeader->e_magic != IMAGE_DOS_SIGNATURE)

  0000f	b8 4d 5a 00 00	 mov	 eax, 23117		; 00005a4dH
  00014	4c 89 41 18	 mov	 QWORD PTR [rcx+24], r8
  00018	4c 89 41 08	 mov	 QWORD PTR [rcx+8], r8
  0001c	4c 89 41 10	 mov	 QWORD PTR [rcx+16], r8
  00020	4c 89 41 20	 mov	 QWORD PTR [rcx+32], r8
  00024	4c 89 01	 mov	 QWORD PTR [rcx], r8
  00027	66 39 02	 cmp	 WORD PTR [rdx], ax
  0002a	0f 85 d3 00 00
	00		 jne	 $LN16@VMSDKInit

; 16   : 		return FALSE;
; 17   : 
; 18   : 	PIMAGE_NT_HEADERS64 NtHeader = (PIMAGE_NT_HEADERS64)((PUCHAR)DosHeader + DosHeader->e_lfanew);

  00030	4c 63 52 3c	 movsxd	 r10, DWORD PTR [rdx+60]
  00034	4c 03 d2	 add	 r10, rdx

; 19   : 	if (NtHeader->Signature != IMAGE_NT_SIGNATURE)

  00037	41 81 3a 50 45
	00 00		 cmp	 DWORD PTR [r10], 17744	; 00004550H
  0003e	0f 85 bf 00 00
	00		 jne	 $LN16@VMSDKInit

; 20   : 		return FALSE;
; 21   : 
; 22   : 	PIMAGE_SECTION_HEADER SectionHeaderTable = (PIMAGE_SECTION_HEADER)((PUCHAR)NtHeader + sizeof(IMAGE_NT_HEADERS64));
; 23   : 	for (WORD i = 0; i < NtHeader->FileHeader.NumberOfSections; i++)

  00044	66 45 3b 42 06	 cmp	 r8w, WORD PTR [r10+6]
  00049	0f 83 b4 00 00
	00		 jae	 $LN16@VMSDKInit
  0004f	90		 npad	 1
$LL4@VMSDKInit:

; 24   : 	{
; 25   : 		if (0 == memcmp(SectionHeaderTable[i].Name, ".vmd", 4))

  00050	41 0f b7 c0	 movzx	 eax, r8w
  00054	48 8d 04 80	 lea	 rax, QWORD PTR [rax+rax*4]
  00058	48 8d 40 21	 lea	 rax, QWORD PTR [rax+33]
  0005c	41 81 3c c2 2e
	76 6d 64	 cmp	 DWORD PTR [r10+rax*8], 1684895278 ; 646d762eH
  00064	49 8d 04 c2	 lea	 rax, QWORD PTR [r10+rax*8]
  00068	75 34		 jne	 SHORT $LN8@VMSDKInit

; 26   : 		{
; 27   : 			VmData->VmHeader = (PVM_HEADER)((ULONG64)ModuleBase + (ULONG64)SectionHeaderTable[i].VirtualAddress);

  0006a	8b 50 0c	 mov	 edx, DWORD PTR [rax+12]
  0006d	49 03 d1	 add	 rdx, r9
  00070	48 89 51 18	 mov	 QWORD PTR [rcx+24], rdx

; 28   : 			if (VmData->VmHeader->Magic != 'kctS')

  00074	81 3a 53 74 63
	6b		 cmp	 DWORD PTR [rdx], 1801679955 ; 6b637453H
  0007a	0f 85 83 00 00
	00		 jne	 $LN16@VMSDKInit

; 29   : 			{
; 30   : 				return FALSE;
; 31   : 			}
; 32   : 			VmData->Unpacker = (PVOID)((ULONG64)VmData->VmHeader + sizeof(VM_HEADER));

  00080	48 8d 82 0d 04
	00 00		 lea	 rax, QWORD PTR [rdx+1037]
  00087	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 33   : 			VmData->SymbolTable = (PVM_SYMBOL)((ULONG64)VmData->VmHeader + sizeof(VM_HEADER) + VmData->VmHeader->UnpackerSize);

  0008b	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  0008e	48 81 c2 0d 04
	00 00		 add	 rdx, 1037		; 0000040dH
  00095	48 03 d0	 add	 rdx, rax
  00098	48 89 51 10	 mov	 QWORD PTR [rcx+16], rdx

; 34   : 		}

  0009c	eb 2e		 jmp	 SHORT $LN2@VMSDKInit
$LN8@VMSDKInit:

; 35   : 		else if (0 == memcmp(SectionHeaderTable[i].Name, ".vmc", 4))

  0009e	81 38 2e 76 6d
	63		 cmp	 DWORD PTR [rax], 1668118062 ; 636d762eH
  000a4	75 0c		 jne	 SHORT $LN11@VMSDKInit

; 36   : 		{
; 37   : 			VmData->VmCode = (PVOID)((ULONG64)ModuleBase + (ULONG64)SectionHeaderTable[i].VirtualAddress);

  000a6	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  000a9	49 03 c1	 add	 rax, r9
  000ac	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 38   : 		}

  000b0	eb 1a		 jmp	 SHORT $LN2@VMSDKInit
$LN11@VMSDKInit:

; 39   : 		else if (0 == memcmp(SectionHeaderTable[i].Name, ".vmh", 4))

  000b2	81 38 2e 76 6d
	68		 cmp	 DWORD PTR [rax], 1752004142 ; 686d762eH
  000b8	75 12		 jne	 SHORT $LN2@VMSDKInit

; 40   : 		{
; 41   : 			if (!(SectionHeaderTable[i].Characteristics & IMAGE_SCN_MEM_EXECUTE))

  000ba	f7 40 24 00 00
	00 20		 test	 DWORD PTR [rax+36], 536870912 ; 20000000H
  000c1	74 40		 je	 SHORT $LN16@VMSDKInit

; 42   : 				return FALSE;
; 43   : 
; 44   : 			VmData->HandlerCodeBase = (PVOID)((ULONG64)ModuleBase + (ULONG64)SectionHeaderTable[i].VirtualAddress);

  000c3	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  000c6	49 03 c1	 add	 rax, r9
  000c9	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN2@VMSDKInit:

; 20   : 		return FALSE;
; 21   : 
; 22   : 	PIMAGE_SECTION_HEADER SectionHeaderTable = (PIMAGE_SECTION_HEADER)((PUCHAR)NtHeader + sizeof(IMAGE_NT_HEADERS64));
; 23   : 	for (WORD i = 0; i < NtHeader->FileHeader.NumberOfSections; i++)

  000cc	66 41 ff c0	 inc	 r8w
  000d0	66 45 3b 42 06	 cmp	 r8w, WORD PTR [r10+6]
  000d5	0f 82 75 ff ff
	ff		 jb	 $LL4@VMSDKInit

; 45   : 		}
; 46   : 	}
; 47   : 
; 48   : 	if (VmData->VmHeader == NULL ||
; 49   : 		VmData->VmCode == NULL ||
; 50   : 		VmData->SymbolTable == NULL ||
; 51   : 		VmData->Unpacker == NULL ||

  000db	48 83 79 18 00	 cmp	 QWORD PTR [rcx+24], 0
  000e0	74 21		 je	 SHORT $LN16@VMSDKInit
  000e2	48 83 79 08 00	 cmp	 QWORD PTR [rcx+8], 0
  000e7	74 1a		 je	 SHORT $LN16@VMSDKInit
  000e9	48 83 79 10 00	 cmp	 QWORD PTR [rcx+16], 0
  000ee	74 13		 je	 SHORT $LN16@VMSDKInit
  000f0	48 83 79 20 00	 cmp	 QWORD PTR [rcx+32], 0
  000f5	74 0c		 je	 SHORT $LN16@VMSDKInit
  000f7	48 83 39 00	 cmp	 QWORD PTR [rcx], 0
  000fb	74 06		 je	 SHORT $LN16@VMSDKInit

; 54   : 
; 55   : 	return TRUE;

  000fd	b8 01 00 00 00	 mov	 eax, 1

; 56   : }

  00102	c3		 ret	 0
$LN16@VMSDKInit:

; 52   : 		VmData->HandlerCodeBase == NULL)
; 53   : 		return FALSE;

  00103	33 c0		 xor	 eax, eax

; 56   : }

  00105	c3		 ret	 0
?VMSDKInit@@YAHPEAU_VM_DATA@@PEAX@Z ENDP		; VMSDKInit
_TEXT	ENDS
END
